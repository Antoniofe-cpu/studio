// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Provides AI-driven watch model recommendations based on user data and market trends.
 *
 * - getWatchRecommendations - A function that returns watch recommendations based on user history, preferences, and current trends.
 * - WatchRecommendationsInput - The input type for the getWatchRecommendations function.
 * - WatchRecommendationsOutput - The return type for the getWatchRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const WatchRecommendationsInputSchema = z.object({
  userHistory: z
    .string()
    .describe('The user history of interactions with the app, as a JSON string.'),
  userPreferences: z
    .string()
    .describe('The user preferences for watches, as a JSON string.'),
  marketTrends: z
    .string()
    .describe('The current market trends for watches, as a JSON string.'),
});

export type WatchRecommendationsInput = z.infer<typeof WatchRecommendationsInputSchema>;

const WatchRecommendationsOutputSchema = z.object({
  recommendations: z
    .string()
    .describe('A list of recommended watch models, as a JSON string.'),
});

export type WatchRecommendationsOutput = z.infer<typeof WatchRecommendationsOutputSchema>;

export async function getWatchRecommendations(input: WatchRecommendationsInput): Promise<WatchRecommendationsOutput> {
  return watchRecommendationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'watchRecommendationsPrompt',
  input: {schema: WatchRecommendationsInputSchema},
  output: {schema: WatchRecommendationsOutputSchema},
  prompt: `You are an expert watch recommendation system.

  Based on the user's history, preferences, and current market trends, provide a list of recommended watch models.

  User History: {{{userHistory}}}
  User Preferences: {{{userPreferences}}}
  Market Trends: {{{marketTrends}}}

  Return the recommendations as a JSON string.
  `,
});

const watchRecommendationsFlow = ai.defineFlow(
  {
    name: 'watchRecommendationsFlow',
    inputSchema: WatchRecommendationsInputSchema,
    outputSchema: WatchRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
